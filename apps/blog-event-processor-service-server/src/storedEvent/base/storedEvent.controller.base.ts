/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StoredEventService } from "../storedEvent.service";
import { StoredEventCreateInput } from "./StoredEventCreateInput";
import { StoredEvent } from "./StoredEvent";
import { StoredEventFindManyArgs } from "./StoredEventFindManyArgs";
import { StoredEventWhereUniqueInput } from "./StoredEventWhereUniqueInput";
import { StoredEventUpdateInput } from "./StoredEventUpdateInput";

export class StoredEventControllerBase {
  constructor(protected readonly service: StoredEventService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StoredEvent })
  async createStoredEvent(
    @common.Body() data: StoredEventCreateInput
  ): Promise<StoredEvent> {
    return await this.service.createStoredEvent({
      data: data,
      select: {
        createdAt: true,
        eventData: true,
        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StoredEvent] })
  @ApiNestedQuery(StoredEventFindManyArgs)
  async storedEvents(@common.Req() request: Request): Promise<StoredEvent[]> {
    const args = plainToClass(StoredEventFindManyArgs, request.query);
    return this.service.storedEvents({
      ...args,
      select: {
        createdAt: true,
        eventData: true,
        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StoredEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async storedEvent(
    @common.Param() params: StoredEventWhereUniqueInput
  ): Promise<StoredEvent | null> {
    const result = await this.service.storedEvent({
      where: params,
      select: {
        createdAt: true,
        eventData: true,
        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StoredEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStoredEvent(
    @common.Param() params: StoredEventWhereUniqueInput,
    @common.Body() data: StoredEventUpdateInput
  ): Promise<StoredEvent | null> {
    try {
      return await this.service.updateStoredEvent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          eventData: true,
          id: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StoredEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStoredEvent(
    @common.Param() params: StoredEventWhereUniqueInput
  ): Promise<StoredEvent | null> {
    try {
      return await this.service.deleteStoredEvent({
        where: params,
        select: {
          createdAt: true,
          eventData: true,
          id: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
