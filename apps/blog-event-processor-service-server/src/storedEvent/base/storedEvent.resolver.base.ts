/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StoredEvent } from "./StoredEvent";
import { StoredEventCountArgs } from "./StoredEventCountArgs";
import { StoredEventFindManyArgs } from "./StoredEventFindManyArgs";
import { StoredEventFindUniqueArgs } from "./StoredEventFindUniqueArgs";
import { CreateStoredEventArgs } from "./CreateStoredEventArgs";
import { UpdateStoredEventArgs } from "./UpdateStoredEventArgs";
import { DeleteStoredEventArgs } from "./DeleteStoredEventArgs";
import { StoredEventService } from "../storedEvent.service";
@graphql.Resolver(() => StoredEvent)
export class StoredEventResolverBase {
  constructor(protected readonly service: StoredEventService) {}

  async _storedEventsMeta(
    @graphql.Args() args: StoredEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StoredEvent])
  async storedEvents(
    @graphql.Args() args: StoredEventFindManyArgs
  ): Promise<StoredEvent[]> {
    return this.service.storedEvents(args);
  }

  @graphql.Query(() => StoredEvent, { nullable: true })
  async storedEvent(
    @graphql.Args() args: StoredEventFindUniqueArgs
  ): Promise<StoredEvent | null> {
    const result = await this.service.storedEvent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StoredEvent)
  async createStoredEvent(
    @graphql.Args() args: CreateStoredEventArgs
  ): Promise<StoredEvent> {
    return await this.service.createStoredEvent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StoredEvent)
  async updateStoredEvent(
    @graphql.Args() args: UpdateStoredEventArgs
  ): Promise<StoredEvent | null> {
    try {
      return await this.service.updateStoredEvent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StoredEvent)
  async deleteStoredEvent(
    @graphql.Args() args: DeleteStoredEventArgs
  ): Promise<StoredEvent | null> {
    try {
      return await this.service.deleteStoredEvent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
