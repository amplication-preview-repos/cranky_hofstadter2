/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, StoredEvent as PrismaStoredEvent } from "@prisma/client";

export class StoredEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StoredEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.storedEvent.count(args);
  }

  async storedEvents<T extends Prisma.StoredEventFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoredEventFindManyArgs>
  ): Promise<PrismaStoredEvent[]> {
    return this.prisma.storedEvent.findMany<Prisma.StoredEventFindManyArgs>(
      args
    );
  }
  async storedEvent<T extends Prisma.StoredEventFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoredEventFindUniqueArgs>
  ): Promise<PrismaStoredEvent | null> {
    return this.prisma.storedEvent.findUnique(args);
  }
  async createStoredEvent<T extends Prisma.StoredEventCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoredEventCreateArgs>
  ): Promise<PrismaStoredEvent> {
    return this.prisma.storedEvent.create<T>(args);
  }
  async updateStoredEvent<T extends Prisma.StoredEventUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoredEventUpdateArgs>
  ): Promise<PrismaStoredEvent> {
    return this.prisma.storedEvent.update<T>(args);
  }
  async deleteStoredEvent<T extends Prisma.StoredEventDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoredEventDeleteArgs>
  ): Promise<PrismaStoredEvent> {
    return this.prisma.storedEvent.delete(args);
  }
}
